// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: moneyTransfer.sql

package sqlc

import (
	"context"
)

const getAccountByID = `-- name: GetAccountByID :one
select account_id, balance from accounts where account_id = $1
`

func (q *Queries) GetAccountByID(ctx context.Context, accountID int32) (*Account, error) {
	row := q.db.QueryRowContext(ctx, getAccountByID, accountID)
	var i Account
	err := row.Scan(&i.AccountID, &i.Balance)
	return &i, err
}

const transferWithCTE = `-- name: TransferWithCTE :exec
with updated_rows as (
    update accounts
    set balance =
        case
            when account_id = $1::int then balance - $3::int
            when account_id = $2::int then balance + $3::int
            else balance
        end
    where account_id in ($1, $2)
    returning account_id, balance
)
select
    assert( bool_and(balance > 0), 'negative balance') as balance_check,
    assert( count(*) = 2, 'account not found') as account_found
from updated_rows
`

type TransferWithCTEParams struct {
	Column1 int32 `json:"column_1"`
	Column2 int32 `json:"column_2"`
	Column3 int32 `json:"column_3"`
}

func (q *Queries) TransferWithCTE(ctx context.Context, arg TransferWithCTEParams) error {
	_, err := q.db.ExecContext(ctx, transferWithCTE, arg.Column1, arg.Column2, arg.Column3)
	return err
}

const transferWithFunction = `-- name: TransferWithFunction :exec
select transferMoney($1, $2, $3)
`

type TransferWithFunctionParams struct {
	InAccFrom int32 `json:"in_acc_from"`
	InAccTo   int32 `json:"in_acc_to"`
	Amount    int32 `json:"amount"`
}

func (q *Queries) TransferWithFunction(ctx context.Context, arg TransferWithFunctionParams) error {
	_, err := q.db.ExecContext(ctx, transferWithFunction, arg.InAccFrom, arg.InAccTo, arg.Amount)
	return err
}

const updateAccountBalance = `-- name: UpdateAccountBalance :exec
update accounts set balance = $2 where account_id = $1
`

type UpdateAccountBalanceParams struct {
	AccountID int32 `json:"account_id"`
	Balance   int32 `json:"balance"`
}

func (q *Queries) UpdateAccountBalance(ctx context.Context, arg UpdateAccountBalanceParams) error {
	_, err := q.db.ExecContext(ctx, updateAccountBalance, arg.AccountID, arg.Balance)
	return err
}
